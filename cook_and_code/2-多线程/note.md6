# 环境
- xubuntu 16.04
- anaconda
- pycharm
- Python3.6
- https://www.cnblogs.com/jikerbj/p/7460260.html
- http://www.dabeaz.com/python/UnderstandingGIL.pdf

# 多线程 vs 多进程
- 程序：一堆代码以文本形式存入一个文档
- 进程：程序运行的一个状态
    - 包含地址空间，内存，数据站等
    - 每个进程有自己完全独立的运行环境（如：一个人的两个qq），多进程共享数据是一个问题
- 线程
    - 一个进程的独立运行片段，一个进程可以有多个线程
    - 轻量化的进程
    - 一个进程的多个线程间共享数据和上下文运行环境
    - 共享互斥问题
- 全局解释器锁（GIL）
    - Python代码的执行是由Python虚拟进行控制
    - 在主循环中只能有一个控制线程在执行
    
# Python包
- thread：有问有，不好用，Python3改成了_thread
- threading:通行的包
- 案例：06-01.py  顺序执行，耗时比较长
    - 15:03:05-----15:03:11  总耗时6s
    
- 案例：06-02.py  改用多线程，缩短时间，是_thread
    - 使用thread.start_new_thread(函数名，参数)，参数没有时用()代替，必须写
    - 16:15:10  几乎同时完成
    
- 案例：06-03.py  多线程，传参数

- threading的使用
    - 直接利用threading.Thread生成Thread实例
        1.t = threading.Thread(target=xxx函数名, args=(xxx参数,))如果只有一个参数，最后一定要有逗号
        2.t.start():启动多线程
        3.t.join():等待多线程执行完成
        4.案例06-04.py
        5.案例06-05.py：在案例06-04.py的基础上加入join(),然后跟案例06-04.py的结果作对比,All done at 一定出现在最后面
        - 守护线程-daemon
            - 如果在程序中将子线程设置成守护线程，则子线程会在主线程结束的时候自动退出
            - 一般认为，守护线程不重要或者不允许离开主线程独立运行
            - 守护线程案例能否有效跟环境相关
            - 案例06-06.py  非守护线程
            - 案例06-07.py  守护线程
        - 线程常用属性
            - threading.currentThread   返回当前线程变量
            - threading.enumerate   返回一个包含正在运行的线程的list，正在运行的线程指的是线程启动后，结束前的状态
            - threading.activeCount  返回正在运行的线程数量，效果跟len(threading.enumerate)相同
            - thr.setName  给线程设置名字
            - thr.getName   得到线程的名字
            - 案例06-08.py 
    - 直接继承自threading.Thread
        - 直接继承Thread
        - 注意：需要重写run函数
        - 类实例可以直接运行
        - 案例06-09.py
            
