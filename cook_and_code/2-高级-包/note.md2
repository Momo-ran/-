# 1.模块
- 一个模块就是一个包含Python代码的文件，后缀名称是.py就可以
- 为什么用模块？
    - 程序太大，编写维护非常不方便，需要拆分
    - 模块可以增加代码重复利用的方式
    - 当做命名空间使用，避免命名冲突
- 如何定义模块
    - 模块就是一个普通文件，所以任何代码可以直接书写
    - 不过根据模块的规范，最好在模块中编写一下内容
        - 函数（单一功能）
        - 类（相似功能的组合，或者类似的业务模块）
        - 一般需要包含测试代码，方便别人使用
- 如何使用模块
    - 模块直接导入(相当于把写好的模块直接粘贴一遍)
        - 假如模块的名称直接以数字开头，比如01/02等，则需要借助于importlib包实现
        - 案例：02中使用01模块，如果不借助于importlib包导入以数字开头的模块，则会报错，
          因为Python会默认01是变量名称，而Python中变量名称不能以数字开头
    - 语法
        -案例：p02中使用p01模块 
        
        import module_name
        module_name.function_name
        module_name.class_name
    - import 模块 as 别名
        - 导入的同时给模块起一个别名
        - 其余用法跟上面（p01/p02）相同
        - 案例：p03
        
    - 有选择性导入模块
        - 在需要导入的模块中，如果有一部分是自己不想导入的，则用
        - from module_name import func_name, class_name
        - 没有前缀
        - 案例：p04中只导入p01的学生类
    - 导入模块的所有内容
        - from module_name import *
        - *代表所有
        - 案例：p05导入p01的所有内容
- if __name__ == '__main__'的使用
    - 可以有效避免模块代码被导入的时候被动执行的问题
    - 建议所有程序的入口都以此代码为入口
    
# 2.模块的搜索路径和存储
- 什么是模块的搜索路径？
    - 加载模块的时候，系统会在哪些地方寻找此模块
- 系统默认的模块搜索路径

            import sys
            sys.path 属性可以获取所有被搜索的路径列表
            使用for循环打印出路径列表
            # 案例：p06
- 如果不想把模块放入已有的路径，而是单独存储，可以自行添加搜索路径  
    - 搜索路径是list，所以添加搜索路径相当于给list添加路径
    - sys.path.append(dir) 
- 模块的加载顺序
    - 1.先搜索内存中已经加载好的模块
    - 2.再搜索Python的内置模块
    - 3.然后搜索sys.path路径
    
# 3.包
- 包的概念：
    - 一种组织管理代码的方式，包里面存放的是模块
    - 用来将模块包含在一起的文件夹就是包，即包是文件夹
    - 包里至少要有__init__.py
    - 自定义包的结构
         /---包
         /---/--- __init__.py 包的标志文件 
         /---/--- 模块1
         /---/--- 模块2
         /---/--- 子包（子文件夹）
         /---/---/--- __init__.py  包的标志文件
         /---/---/--- 子包模块1
         /---/---/--- 子包模块2
         
- 包的导入操作
    - import package name
        - 直接导入一个包，可以使用__init__.py中的内容
        - 使用方式是：
                package_name.func_name
                package_name.class_name.func_name()
        - 此种方式的访问内容是
        - 案例：pkg01, p07 ,在p07中导入pkg01
    - import package_name as p
        - 具体用法跟作用，跟上面模块的导入方法一致
        - 注意此方法是默认对__init__.py内容的导入，不包含其他的，而我们想要导入的
          是Python的文件，而不是__init__
    - import package.module
        - 导入包中某一个具体的模块
        - 使用方法
                package.module.func_name
                package.module.class.fun()
                package.module.class.var
                # 案例：p08，p08里导入包pkg01里的p001
    - import package.module as p
        - 同上
    - from ...import 指定模块导入 
        - from package import module1, module2, module3,...
        - 此种方法不执行__init__ 的内容
        - 使用方法
                from pkg01 import p001
                p001.sayHello()
    - from package import *
        - 导入包里__init__.py文件中所有内容（函数和类），注意只是__init__.py文件中的内容，不包括其他的
        - 使用方法（直接调用）
                func_name()
                class_name.func_name()
                class_name.var
                # 案例：p09，注意此种方式导入的具体内容,只有__init__中的内容，而没有p001的内容
    - from package.module import *
        - 导入包中指定模块的所有内容
        - 使用方法
                func_name()
                class_name.func_name()  
    - 在开发环境中经常会使用其他模块，可以在当前包中直接导入其他模块中的内容
        - import 完整的包或者模块的路径
    - “__all__” 的用法
        - 在使用from package import *的时候，* 可以导入的内容
        - '__init__.py' 中如果文件为空，或者没有'__all__',那么只可以把'__init__'中的内容导入
        - '__init__'中如果设置了'__all__'的值，则按照'__all__'指定的子包或者模块进行加载，
          此时不会导入'__init__'中的内容
        - '__all__ = ['module1', 'module2', 'package1'.....]' 
        # 案例：pkg02, p10, 在p10中导入pkg02中'__init__'设置的'__all__'中内容 
# 4.命名空间
- 用于区分不同位置不同功能但相同名称的函数或者变量的一个特定前缀
- 作用是防止命名冲突
        setName()
        Student.setName()
        Dog.setName()
    
        
                        
                             
                           
        
                             
      
        
        
