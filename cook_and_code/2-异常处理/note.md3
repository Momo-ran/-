# 1.异常
- 什么事异常
    - 异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行
    -一般情况下，在Python无法正常处理程序时就会发生一个异常
    -异常是Python对象，表示一个错误
    -当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行
    
- 广义上的错误分为错误和异常
    - 错误可以人为避免，而异常是指在语法逻辑正确的前提下，出现的问题，是不可避免的
    - 在Python里，异常是一个类，可以处理和使用

-Python中异常的类型
    - BaseException	所有异常的基类
    - SystemExit	解释器请求退出
    - KeyboardInterrupt	用户中断执行(通常是输入^C)
    - Exception	常规错误的基类
    - StopIteration	迭代器没有更多的值
    - GeneratorExit	生成器(generator)发生异常来通知退出
    - StandardError	所有的内建标准异常的基类
    - ArithmeticError	所有数值计算错误的基类
    - FloatingPointError	浮点计算错误
    - OverflowError	数值运算超出最大限制
    - ZeroDivisionError	除(或取模)零 (所有数据类型)
    - AssertionError	断言语句失败
    - AttributeError	对象没有这个属性
    - EOFError	没有内建输入,到达EOF 标记
    - EnvironmentError	操作系统错误的基类
    - IOError	输入/输出操作失败
    - OSError	操作系统错误
    - WindowsError	系统调用失败
    - ImportError	导入模块/对象失败
    - LookupError	无效数据查询的基类
    - IndexError	序列中没有此索引(index)
    - KeyError	映射中没有这个键
    - MemoryError	内存溢出错误(对于Python 解释器不是致命的)
    - NameError	未声明/初始化对象 (没有属性)
    - UnboundLocalError	访问未初始化的本地变量
    - ReferenceError	弱引用(Weak reference)试图访问已经垃圾回收了的对象
    - RuntimeError	一般的运行时错误
    - NotImplementedError	尚未实现的方法
    - SyntaxError	Python 语法错误
    - IndentationError	缩进错误
    - TabError	Tab 和空格混用
    - SystemError	一般的解释器系统错误
    - TypeError	对类型无效的操作
    - ValueError	传入无效的参数
    - UnicodeError	Unicode 相关的错误
    - UnicodeDecodeError	Unicode 解码时的错误
    - UnicodeEncodeError	Unicode 编码时错误
    - UnicodeTranslateError	Unicode 转换时错误
    - Warning	警告的基类
    - DeprecationWarning	关于被弃用的特征的警告
    - FutureWarning	关于构造将来语义会有改变的警告
    - OverflowWarning	旧的关于自动提升为长整型(long)的警告
    - PendingDeprecationWarning	关于特性将会被废弃的警告
    - RuntimeWarning	可疑的运行时行为(runtime behavior)的警告
    - SyntaxWarning	可疑的语法的警告
    - UserWarning	用户代码生成的警告
    
- 异常处理
    - 捕捉异常可以使用try/except语句
    - try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理
    - 如果你不想在异常发生时结束你的程序，只需在try里捕获它
    - 语法
            try:
                <语句>        # 运行别的代码，尝试实现某个操作，如果没出现异常，则任务就可以完成，如果出现异常，
                                将异常从当前代码块扔出去尝试解决异常
                                
            except <名字>：
                <语句>        # 如果在try部份引发了'name'异常
                
            except <名字>，<数据>(异常类型1，异常类型2...):
                <语句>        # 如果引发了'name'异常，获得附加的数据，针对多个异常使用相同的处理方式
                
            else:
                <语句>        # 如果没有异常发生，将会执行此代码
                
            finally：
                <语句>        # 不管有没有异常都将执行此代码
    - 流程
        1.执行try下面语句内容
        2.如果出现异常，则在except语句里查找对应异常并进行处理
        3.如果没有出现异常，则执行else语句内容
        4.最后，不管是否出现异常，都要执行finally语句内容
    - 除except（至少一个）以外，else和finally都是可选的
    - 案例：jupyter notebook高级语法中除零异常
    - 在异常类继承关系中，如果出现多种异常，越具体的异常，越往前放,即子类的异常放前面，父类的异常放后面
    - 在处理异常的时候，一旦拦截到某一个异常，则不再往下继续查找，直接进行下一个代码，即：有finally则执行
      finally语句，否则就执行下一个大的语句
    - 所有异常都继承自Exception，如果写了下面这个代码，任何异常都会拦截住，所以这一定是最后一个except语句
            except Exception as 实例化变量a:
            
    - 用户自定义异常（手动引发）
        - 某些情况下，用户希望自己引发一个异常的时候，可以使用raise关键字来引发异常
        - 语法：raise后面跟异常类名
                
                raise ErrorClassName 
                # 案例：jupyter notebook高级语法中除raise案例-1
        - 自定义异常类
            -  注意：自定义异常必须是系统异常的子类
            - 案例：jupyter notebook高级语法中除raise案例-2
        - 在自定义异常时，一般包含以下内容
            - 1.自定义发生异常的异常代码
            - 2.自定义发生异常后的问题提示
            - 3.自定义发生异常的行数
        - 最终目的是，一旦发生异常，方便程序员快速定位错误现场
        
# 2.常用包介绍
- 常用模块
    - calendar
    - time
    - datetime
    - timeit
    - os
    - shutil
    - zip
    - math
    - string
    # 上述所有模块使用时理论上都应该先导入，string是特例
- 1.calendar:跟日历相关的模块，使用时需要先导入，即import calendar
    - calendar：获取一年的日历字符串
    - 参数：
        - w = 每个日期之间的间隔字符数
        - l = 每周所占用的行数
        - c = 每个月之间的间隔字符数
        - 案例：参考jupyter notebook中日历案例
- isleap:判断某一年是否闰年，返回一个布尔值
- leapdays:获取指定年份之间的闰年个数
    
    - month():获取某个月的日历字符串
    - 格式：calendar.month(年，月)
    - 回值：月日历的字符串
    - 案例：参考jupyter notebook
    
    - monthrange():获取一个月的周几开始和总天数
    - 格式：calendar.monthrange(年，月)
    - 回值：元组（周几开始，总天数）
    - 注意：周默认0-6，表示周一到周日
    - 案例
    
    - monthcalendar():返回一个月每天的矩阵列表
    - 格式：calendar.monthcalendar(年，月)
    - 回值：二级列表
    - 注意：矩阵中没有天数用0表示
    
    - prcal:print calendar的缩写，直接打印一年的日历
    - 格式：calendar.prcal(年)
    
    - prmonth：直接打印一个月的日历
    - 格式：calendar.prmonth(年，月)
    
    - weekday(): 获取周几
    - 格式：calendar.weekday(年，月，日)
    - 返回值：周几对应的数字
    
- 2.time模块
- 时间戳
    - 一个时间表示，根据不同语言，可以是整数，也可以是浮点数
    - 是从1970年1月1日0点0分0秒到现在经历的秒数
    - 32位操作系统能够支持到2038年
- UTC时间
    - 国际标准时间
    - 中国：UTC+8 东八区
- 夏令时
    - 在夏天的时候将时间调快一小时，每天变成25小时，但本质还是24小时
- 时间元祖
    - 一个包含时间内容的普通元组
    - 一般包含以下内容
    - 首先需要单独导入
    
            索引              内容              属性              值
             0                 年               tm_year          2018
             1                 月               tm_mon           1—12
             2                 日               tm_mday          1—31
             3                 时               tm_hour          0—23
             4                 分               tm_min           0—59
             5                 秒               tm_sec           0—61    60表示闰秒   61保留值
             6                 周几             tm_wday          0—6
             7                 第几天           tm_yday          1—366
             8                 夏令时           tm_isdst         0,1，-1（表示夏令时）
    
    - timezone：在没有夏令时的情况下，当前时区和UTC时区相差的秒数
    - altzone：在有夏令时的情况下，当前时区和UTC时区相差的秒数 
    - daylight: 检查当前是否是夏令营时间状态，0表示是    
    - 得到时间戳：time.time()
    - localtime(): 得到当前时间的时间结构，可以通过点操作符直接访问时间元祖里的元素
    - asctime(): 返回元祖的正常字符化后的时间格式
        - 格式：time.asctime(时间元祖)
        - 返回值：字符串 年月日时分秒
    - ctime(): 获取字符串化的当前时间
        - 格式：time.ctime()
    - mktime()：使用时间元祖获取对应的时间戳
        - 格式：time.mktime(时间元祖)
        - 返回值：浮点数时间戳
    - clock：获取CPU时间，3.0—3.3版本直接使用，其他版本调用有问题
    - sleep：使程序进入睡眠，n秒后继续
    - strftime: 将时间元祖转化成自定义的字符串格式
    - 案例：jupyter

- 3.datetime模块
    - 提供日期和时间的运算和表示
    - 首先需要导入
            import datetime
            - datetime.date(年，月，日):一个理想化的日期，提供year，month，day属性
            - datetime.time:一个理想化时间，提供hour，minute，second，microseconds等属性
            - datetime.datetime:提供日期跟时间的组合
                - 使用from datetime import datetime
                - 常用类方法：
                    - today
                    - now
                    - utcnow
                    - fromtimestamp：从时间戳中返回本地时间
                    # 用法参考案例
            - datetime.timedelta:提供一个时间差，表示时间长度
            - timeit：时间测量工具
