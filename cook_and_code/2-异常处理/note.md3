# 1.异常
- 什么事异常
    - 异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行
    -一般情况下，在Python无法正常处理程序时就会发生一个异常
    -异常是Python对象，表示一个错误
    -当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行
    
- 广义上的错误分为错误和异常
    - 错误可以人为避免，而异常是指在语法逻辑正确的前提下，出现的问题，是不可避免的
    - 在Python里，异常是一个类，可以处理和使用

-Python中异常的类型
    - BaseException	所有异常的基类
    - SystemExit	解释器请求退出
    - KeyboardInterrupt	用户中断执行(通常是输入^C)
    - Exception	常规错误的基类
    - StopIteration	迭代器没有更多的值
    - GeneratorExit	生成器(generator)发生异常来通知退出
    - StandardError	所有的内建标准异常的基类
    - ArithmeticError	所有数值计算错误的基类
    - FloatingPointError	浮点计算错误
    - OverflowError	数值运算超出最大限制
    - ZeroDivisionError	除(或取模)零 (所有数据类型)
    - AssertionError	断言语句失败
    - AttributeError	对象没有这个属性
    - EOFError	没有内建输入,到达EOF 标记
    - EnvironmentError	操作系统错误的基类
    - IOError	输入/输出操作失败
    - OSError	操作系统错误
    - WindowsError	系统调用失败
    - ImportError	导入模块/对象失败
    - LookupError	无效数据查询的基类
    - IndexError	序列中没有此索引(index)
    - KeyError	映射中没有这个键
    - MemoryError	内存溢出错误(对于Python 解释器不是致命的)
    - NameError	未声明/初始化对象 (没有属性)
    - UnboundLocalError	访问未初始化的本地变量
    - ReferenceError	弱引用(Weak reference)试图访问已经垃圾回收了的对象
    - RuntimeError	一般的运行时错误
    - NotImplementedError	尚未实现的方法
    - SyntaxError	Python 语法错误
    - IndentationError	缩进错误
    - TabError	Tab 和空格混用
    - SystemError	一般的解释器系统错误
    - TypeError	对类型无效的操作
    - ValueError	传入无效的参数
    - UnicodeError	Unicode 相关的错误
    - UnicodeDecodeError	Unicode 解码时的错误
    - UnicodeEncodeError	Unicode 编码时错误
    - UnicodeTranslateError	Unicode 转换时错误
    - Warning	警告的基类
    - DeprecationWarning	关于被弃用的特征的警告
    - FutureWarning	关于构造将来语义会有改变的警告
    - OverflowWarning	旧的关于自动提升为长整型(long)的警告
    - PendingDeprecationWarning	关于特性将会被废弃的警告
    - RuntimeWarning	可疑的运行时行为(runtime behavior)的警告
    - SyntaxWarning	可疑的语法的警告
    - UserWarning	用户代码生成的警告
    
- 异常处理
    - 捕捉异常可以使用try/except语句
    - try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理
    - 如果你不想在异常发生时结束你的程序，只需在try里捕获它
    - 语法
            try:
                <语句>        # 运行别的代码，尝试实现某个操作，如果没出现异常，则任务就可以完成，如果出现异常，
                                将异常从当前代码块扔出去尝试解决异常
                                
            except <名字>：
                <语句>        # 如果在try部份引发了'name'异常
                
            except <名字>，<数据>(异常类型1，异常类型2...):
                <语句>        # 如果引发了'name'异常，获得附加的数据，针对多个异常使用相同的处理方式
                
            else:
                <语句>        # 如果没有异常发生，将会执行此代码
                
            finally：
                <语句>        # 不管有没有异常都将执行此代码
    - 流程
        1.执行try下面语句内容
        2.如果出现异常，则在except语句里查找对应异常并进行处理
        3.如果没有出现异常，则执行else语句内容
        4.最后，不管是否出现异常，都要执行finally语句内容
    - 除except（至少一个）以外，else和finally都是可选的
    - 案例：jupyter notebook高级语法中除零异常
    - 在异常类继承关系中，如果出现多种异常，越具体的异常，越往前放,即子类的异常放前面，父类的异常放后面
    - 在处理异常的时候，一旦拦截到某一个异常，则不再往下继续查找，直接进行下一个代码，即：有finally则执行
      finally语句，否则就执行下一个大的语句
    - 所有异常都继承自Exception，如果写了下面这个代码，任何异常都会拦截住，所以这一定是最后一个except语句
            except Exception as 实例化变量a:
            
    - 用户自定义异常（手动引发）
        - 某些情况下，用户希望自己引发一个异常的时候，可以使用raise关键字来引发异常
        - 语法：raise后面跟异常类名
                
                raise ErrorClassName 
                # 案例：jupyter notebook高级语法中除raise案例-1
        - 自定义异常类
            -  注意：自定义异常必须是系统异常的子类
            - 案例：jupyter notebook高级语法中除raise案例-2
        - 在自定义异常时，一般包含以下内容
            - 1.自定义发生异常的异常代码
            - 2.自定义发生异常后的问题提示
            - 3.自定义发生异常的行数
        - 最终目的是，一旦发生异常，方便程序员快速定位错误现场


